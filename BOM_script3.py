import mysql.connector
import pandas as pd
import numpy as np
import tkinter as tk
from tkinter import Tk
from tkinter.filedialog import askopenfilename
from tkinter import messagebox
import re




#pooling out the "parts" database from punk/vorelec
cnx = mysql.connector.connect(user='web-user', password='jump0ff',
                              host='192.168.254.62',
                              database='vorelec')
cursor = cnx.cursor()  
query = ("SELECT pn, description, manufacturer, manufpn, form, mount form FROM master")
cursor.execute(query)
PN = []
Desc = []
Manufacturer = []
Manufpn = []
Case = []
Mount = []
for (pn, description, manufacturer, manufpn, form, mount) in cursor:
    PN.append(pn)
    Desc.append(description)
    Manufacturer.append(manufacturer)
    Manufpn.append(manufpn)
    Case.append(form)
    Mount.append(mount)
cnx.close()

#getting rid of funy A character
def charA(x):
    return x.replace('Ã‚', '')
Desc = [charA(str(i)) for i in Desc]


Parts_from_db = pd.DataFrame([PN,Desc,Manufacturer,Manufpn,Case, Mount]).transpose()
Parts_from_db.columns = ['PN','Desc','Manufacturer','Manufpn','Case', 'Mount']
Parts_from_db = Parts_from_db.set_index ('PN')



#getting BOM file generated by Kicad with our vorelec plugin

root = Tk()
root.withdraw() # we don't want a full GUI, so keep the root window from appearing
root.lift()
path_to_kicad_generated_bom_csv = askopenfilename(filetypes=[("CSV Files",".csv")]) # show an "Open" dialog box and return the path to the selected file

KiCad_BOM = pd.read_csv(path_to_kicad_generated_bom_csv)
KiCad_BOM = KiCad_BOM.reindex(columns = KiCad_BOM.columns.tolist() + ['Manufacturer'
                                                                      ,'Manufacturer Part Number'                                                                                                                                      ,'Description'
                                                                     , 'Package / Case'
                                                                     ,'SMD ,BGA,LLC(QFN),OR  TH'])

#filling missing fields in BOM from Parts database, based on common PN
for indx in range (KiCad_BOM.shape[0]):
    pn_of_group = KiCad_BOM.loc[indx]['PN']
    DNI = KiCad_BOM.loc[indx]['DNI']
    if (str(DNI)!='DNI'):
        if str(pn_of_group)=='nan':
            #message "not all pns are filled!"
            messagebox.showinfo("Error","not all PNs are filled!")
            break
        KiCad_BOM.loc[indx,'Manufacturer'] = Parts_from_db.loc[pn_of_group, 'Manufacturer']
        KiCad_BOM.loc[indx,'Manufacturer Part Number'] = Parts_from_db.loc[pn_of_group, 'Manufpn']
        KiCad_BOM.loc[indx,'Package / Case'] = Parts_from_db.loc[pn_of_group, 'Case']
        KiCad_BOM.loc[indx,'Description'] = Parts_from_db.loc[pn_of_group, 'Desc']
        KiCad_BOM.loc[indx,'SMD ,BGA,LLC(QFN),OR  TH'] = Parts_from_db.loc[pn_of_group, 'Mount']

KiCad_BOM = KiCad_BOM.sort_values(by=['PN'], ascending=True)

KiCad_BOM_DNI = KiCad_BOM[KiCad_BOM['DNI']=='DNI']
KiCad_BOM = KiCad_BOM.drop (KiCad_BOM[KiCad_BOM['DNI']=='DNI'].index)
#KiCad_BOM = KiCad_BOM.append(KiCad_BOM_DNI).reset_index(drop=True)


KiCad_BOM['Item'] = range (KiCad_BOM.shape[0])
KiCad_BOM['Item']=KiCad_BOM['Item']+1


#final formatting/polishing
BOM_to_save = KiCad_BOM[['Item', 'PN','Manufacturer'
                         , 'Manufacturer Part Number', 'Designator'
                         , 'Qnty', 'Description', 'Package / Case'
                         , 'SMD ,BGA,LLC(QFN),OR  TH']]


#function writing df BOM_to_save into path_to_final_BOM_xlsx
def xlsx_writer(BOM_to_save, path_to_final_BOM_xlsx):
    xlsx_writer = pd.ExcelWriter(path_to_final_BOM_xlsx, engine='xlsxwriter')

    BOM_to_save.to_excel(xlsx_writer, sheet_name='Sheet1', index=False)
    wb = xlsx_writer.book
    ws = xlsx_writer.sheets['Sheet1']

    common_format = wb.add_format({'align': 'center', 'valign': 'vcenter'})

    ws.set_column('A:A', 5, common_format) #Item
    ws.set_column('B:B', 15, common_format) #PN
    ws.set_column('C:E', 25, common_format) #Manuf, Manuf part numb and Designator
    ws.set_column('F:F', 5, common_format) #Qnty
    ws.set_column('G:G', 35, common_format) #descript
    ws.set_column('H:H', 15, common_format) #case
    ws.set_column('I:I', 25, common_format) #SMD

    xlsx_writer.save()

#parsing path_to_kicad_generated_bom_csv to extruct project name
path_to_kicad_generated_bom = path_to_kicad_generated_bom_csv[:-4]
sl = [sl.start() for sl in re.finditer('/', path_to_kicad_generated_bom)]
our_directory = path_to_kicad_generated_bom[:sl[-1]+1]
fn = path_to_kicad_generated_bom [sl[-3]+1:sl[-2]] + '_' + path_to_kicad_generated_bom [sl[-2]+1:sl[-1]]
fn1 = fn.replace('.','dot')+'_BOM_vorelec.xlsx'
path_to_final_BOM_xlsx = our_directory + fn1

xlsx_writer(BOM_to_save, path_to_final_BOM_xlsx)
#dni
BOM_to_save = KiCad_BOM_DNI[['PN','Manufacturer'
                         , 'Manufacturer Part Number', 'Designator'
                         , 'Qnty', 'Description', 'Package / Case'
                         , 'SMD ,BGA,LLC(QFN),OR  TH']]
fn2 = fn.replace('.','dot')+'_DNI.xlsx'
path_to_final_BOM_xlsx = our_directory + fn2
xlsx_writer(BOM_to_save, path_to_final_BOM_xlsx)
